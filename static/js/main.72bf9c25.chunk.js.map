{"version":3,"sources":["components/Layout/Header/Header.js","components/Layout/Wrapper/Wrapper.js","containers/MainPage/MainPage.js","containers/App.js","serviceWorker.js","reducers/reducers.js","components/Theme/Theme.js","index.js","actions/actions.js","components/Layout/LoadingSpinner/LoadingSpinner.js","constants.js"],"names":["routes","route","TODAY_ROUTE","text","icon","HISTORY_ROUTE","MOTIVATION_ROUTE","GOALS_ROUTE","useStyles","makeStyles","theme","root","display","drawer","breakpoints","up","width","flexShrink","appBar","down","height","zIndex","appBarHeadline","margin","menuButton","position","left","spacing","darkModeButton","right","transform","toolbar","mixins","drawerPaper","content","flexGrow","padding","Header","onRouteChange","onDarkModeChange","darkMode","goalsSet","classes","useTheme","React","useState","mobileOpen","setMobileOpen","handleDrawerToggle","className","Divider","List","map","object","index","ListItem","onClick","button","key","ListItemIcon","ListItemText","primary","disabled","HtmlTooltip","withStyles","tooltip","backgroundColor","palette","grey","A200","color","maxWidth","fontSize","typography","pxToRem","border","Tooltip","CssBaseline","AppBar","Toolbar","IconButton","aria-label","edge","Typography","variant","noWrap","title","Fragment","Hidden","smUp","implementation","Drawer","anchor","direction","open","onClose","paper","ModalProps","keepMounted","xsDown","marginTop","marginLeft","paddingTop","paddingBottom","paddingLeft","paddingRight","Wrapper","props","children","AsyncPageInitial","lazy","AsyncPageToday","AsyncPageHistory","AsyncPageMotivation","AsyncPageGoals","MainPage","getRouteComponent","goalsPageOptions","goals","onAddGoal","onEditGoal","onRemoveGoal","calculateRoutineToShow","INITIAL_ROUTE","fallback","LoadingSpinner","options","state","this","page","hideTitle","noGoalsMessage","length","body","undefined","Component","backgroundImage","backgroundPosition","backgroundRepeat","backgroundSize","App","connect","changeRoute","changeDarkMode","changeGoals","dispatch","setRoute","setDarkMode","goal","addGoal","editGoal","removeGoal","Boolean","window","location","hostname","match","initialRoute","initialDarkMode","time","Date","getHours","calculateDarkMode","initialGoals","initialRoutines","routines","id","recap","tasks","description","plannedtime","tableData","done","category","createdAt","routineToShow","now","midnight","toDateString","yesterdaySix","setDate","getDate","setHours","sort","a","b","parse","routineToReturn","find","routine","initialPagesVisited","pagesVisited","visited","useMemo","createMuiTheme","type","light","main","dark","secondary","ThemeProvider","logger","createLogger","rootReducer","combineReducers","action","CHANGE_ROUTE","Object","assign","payload","CHANGE_DARK_MODE","ADD_GOAL","newGoals","EDIT_GOAL","REMOVE_GOAL","filter","changeRoutines","SAVE_ROUTINE","newRoutine","Math","max","r","newRoutines","CALCULATE_ROUTINETOSHOW","CHANGE_TASK_DONE","routineIndex","task","taskIndex","changePageVisited","CHANGE_PAGE_VISITED","store","createStore","composeWithDevTools","applyMiddleware","thunkMiddleware","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","boolean","saveRoutine","setTaskDone","setPageVisited","ROUTE","GOAL_CATEGORIES","GOAL_CAT_EDUCATIONAL","GOAL_CAT_HEALTH","GOAL_CAT_RELATIONSHIP","GOAL_CAT_PERSONAL","GOAL_CAT_CAREER","GOAL_CAT_FINANCIAL","GOAL_CAT_SPIRITUAL","GOAL_CAT_PSYCHOLOGICAL","GOAL_CAT_EXTERNAL","GOAL_CAT_EXPERIMENTAL"],"mappings":"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","file":"static/js/main.72bf9c25.chunk.js","sourcesContent":["import React from 'react';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport IconButton from '@material-ui/core/IconButton';\nimport MenuIcon from '@material-ui/icons/Menu';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport Divider from '@material-ui/core/Divider';\nimport Drawer from '@material-ui/core/Drawer';\nimport Hidden from '@material-ui/core/Hidden';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport InsertEmoticonIcon from '@material-ui/icons/InsertEmoticon';\nimport TodayIcon from '@material-ui/icons/Today';\nimport DateRangeIcon from '@material-ui/icons/DateRange';\nimport AssessmentIcon from '@material-ui/icons/Assessment';\nimport Brightness2Icon from '@material-ui/icons/Brightness2';\nimport WbSunnyIcon from '@material-ui/icons/WbSunny';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport { withStyles, makeStyles, useTheme } from '@material-ui/core/styles';\n\n\nimport './Header.css';\nimport { TODAY_ROUTE, HISTORY_ROUTE, MOTIVATION_ROUTE, GOALS_ROUTE } from '../../../constants';\n\n\nconst drawerWidth = 200;\nconst routes = [{\n    route: TODAY_ROUTE,\n    text: 'Today',\n    icon: <TodayIcon />\n}, {\n    route: HISTORY_ROUTE,\n    text: 'History',\n    icon: <DateRangeIcon />\n}, {\n    route: MOTIVATION_ROUTE,\n    text: 'Motivaton',\n    icon: <InsertEmoticonIcon />\n}, {\n    route: GOALS_ROUTE,\n    text: 'Goals',\n    icon: <AssessmentIcon />\n}];\n\nconst useStyles = makeStyles(theme => ({\n    root: {\n        display: 'flex',\n    },\n    drawer: {\n        [theme.breakpoints.up('sm')]: {\n            width: drawerWidth,\n            flexShrink: 0,\n        },\n    },\n    appBar: {\n        [theme.breakpoints.down('sm')]: {\n            height: 56,\n        },\n        [theme.breakpoints.up('sm')]: {\n            height: 64,\n        },\n        zIndex: theme.zIndex.drawer + 1,\n    },\n    appBarHeadline: {\n        [theme.breakpoints.down('sm')]: {\n            margin: 'auto',\n        },\n        [theme.breakpoints.up('sm')]: {\n            margin: 'unset',\n        },\n    },\n    menuButton: {\n        position: 'absolute',\n        left: theme.spacing(2),\n        [theme.breakpoints.up('sm')]: {\n            display: 'none',\n        },\n    },\n    darkModeButton: {\n        position: 'absolute',\n        right: theme.spacing(2),\n        transform: 'rotate(-215deg)'\n    },\n    toolbar: theme.mixins.toolbar,\n    drawerPaper: {\n        width: drawerWidth,\n    },\n    content: {\n        flexGrow: 1,\n        padding: theme.spacing(3),\n    },\n}));\n\nconst Header = ({ onRouteChange, onDarkModeChange, darkMode, goalsSet }) => {\n\n    //goalsSet = true;    //for testing purpose\n\n    const classes = useStyles();\n    const theme = useTheme();\n    const [mobileOpen, setMobileOpen] = React.useState(false);\n\n    const handleDrawerToggle = () => {\n        setMobileOpen(!mobileOpen);\n    };\n\n    const drawer = (\n        <div>\n            <div className={classes.toolbar} />\n            <Divider />\n            <List>\n                {goalsSet ?\n                    routes.map((object, index) => (\n                        <ListItem onClick={() => onRouteChange(object.route)} button key={object.text}>\n                            <ListItemIcon>\n                                {object.icon}\n                            </ListItemIcon>\n                            <ListItemText primary={object.text} />\n                        </ListItem>\n                    )) :\n                    routes.map((object, index) => (\n                        object.route === GOALS_ROUTE ?\n                            <ListItem onClick={() => onRouteChange(object.route)} button key={object.text}>\n                                <ListItemIcon>\n                                    {object.icon}\n                                </ListItemIcon>\n                                <ListItemText primary={object.text} />\n                            </ListItem>\n                            :\n                            <ListItem disabled button key={object.text}>\n                                <ListItemIcon>\n                                    {object.icon}\n                                </ListItemIcon>\n                                <ListItemText primary={object.text} />\n                            </ListItem>\n                    ))\n                }\n            </List>\n        </div>\n    );\n\n    const HtmlTooltip = withStyles(theme => ({\n        tooltip: {\n            backgroundColor: theme.palette.grey.A200,\n            color: 'rgba(0, 0, 0, 1)',\n            maxWidth: 220,\n            fontSize: theme.typography.pxToRem(12),\n            border: '1px solid #dadde9',\n        },\n    }))(Tooltip);\n\n    return (\n        <div className={classes.root}>\n            <CssBaseline />\n            <AppBar position=\"fixed\" className={classes.appBar}>\n                <Toolbar>\n                    <IconButton\n                        color=\"inherit\"\n                        aria-label=\"open drawer\"\n                        edge=\"start\"\n                        onClick={handleDrawerToggle}\n                        className={classes.menuButton}\n                    >\n                        <MenuIcon />\n                    </IconButton>\n\n                    <Typography className={classes.appBarHeadline} variant=\"h6\" noWrap>\n                        Evening Routine\n                            </Typography>\n                    <HtmlTooltip\n                        title={\n                            <React.Fragment>\n                                <Typography color=\"inherit\">Change Color Mode</Typography>\n                                {\"(depending on\"} <b>{'time of day'}</b> {\")\"}\n                            </React.Fragment>\n                        }\n                    >\n                        <IconButton\n                            color=\"inherit\"\n                            aria-label=\"open drawer\"\n                            edge=\"end\"\n                            onClick={() => onDarkModeChange(!darkMode)}\n                            className={classes.darkModeButton}\n                        >\n                            {darkMode && <Brightness2Icon />}\n                            {!darkMode && <WbSunnyIcon />}\n                        </IconButton>\n                    </HtmlTooltip>\n\n                </Toolbar>\n            </AppBar>\n            <nav className={classes.drawer} aria-label=\"mailbox folders\">\n                {/* The implementation can be swapped with js to avoid SEO duplication of links. */}\n                <Hidden smUp implementation=\"css\">\n                    <Drawer\n                        //container={container}\n                        variant=\"temporary\"\n                        anchor={theme.direction === 'rtl' ? 'right' : 'left'}\n                        open={mobileOpen}\n                        onClose={handleDrawerToggle}\n                        classes={{\n                            paper: classes.drawerPaper,\n                        }}\n                        ModalProps={{\n                            keepMounted: true, // Better open performance on mobile.\n                        }}\n                    >\n                        {drawer}\n                    </Drawer>\n                </Hidden>\n                <Hidden xsDown implementation=\"css\">\n                    <Drawer\n                        classes={{\n                            paper: classes.drawerPaper,\n                        }}\n                        variant=\"permanent\"\n                        open\n                    >\n                        {drawer}\n                    </Drawer>\n                </Hidden>\n            </nav>\n\n        </div>\n    );\n}\n\n\nexport default Header;","import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\n/*\nWrapper is a component to wrap the content inside of the drawer and toolbar\n*/\n\nconst useStyles = makeStyles(theme => ({\n    content: {\n\n        [theme.breakpoints.up('sm')]: {\n            marginTop: 64,\n            marginLeft: 200,\n        },\n        flexGrow: 1,\n        padding: theme.spacing(3),\n        [theme.breakpoints.down('sm')]: {\n            paddingTop: theme.spacing(3),\n            paddingBottom: theme.spacing(3),\n            paddingLeft: 5,\n            paddingRight: 5,\n            marginTop: 56,\n        },\n    },\n}));\n\nconst Wrapper = (props) => {\n    const classes = useStyles();\n    return (\n        <div className={classes.content}>\n            {props.children}\n        </div>\n    );\n};\n\nexport default Wrapper;","import React, { Component, Suspense, lazy } from 'react';   //destructuring (instead of React.Component)\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\n\nimport {\n    INITIAL_ROUTE,\n    TODAY_ROUTE,\n    HISTORY_ROUTE,\n    MOTIVATION_ROUTE,\n    GOALS_ROUTE\n} from '../../constants'       //get constants form constants file\n\n\nimport Header from '../../components/Layout/Header/Header';\nimport Wrapper from '../../components/Layout/Wrapper/Wrapper'\nimport LoadingSpinner from '../../components/Layout/LoadingSpinner/LoadingSpinner';\n\n\n\nconst AsyncPageInitial = lazy(() => import('../../components/Pages/InitialPage/InitialPage'));\n\nconst AsyncPageToday = lazy(() => import('../../components/Pages/TodayPage/TodayPage'));\n\nconst AsyncPageHistory = lazy(() => import('../../components/Pages/HistoryPage/HistoryPage'));\n\nconst AsyncPageMotivation = lazy(() => import('../../components/Pages/MotivationPage/MotivationPage'));\n\nconst AsyncPageGoals = lazy(() => import('../../components/Pages/GoalsPage/GoalsPage'));\n\n//const AsyncPageImprint = lazy(() => import('../../components/Pages/Imprint/Imprint'));\n\n\n\nconst styles = theme => ({\n    //toolbar: theme.mixins.toolbar,\n    body: {\n        height: '100vh',\n        backgroundImage: 'url(\"images/backgrounds/background_coffee.jpg\")',\n        backgroundPosition: 'center',\n        backgroundRepeat: 'no-repeat',\n        backgroundSize: 'cover',\n    }\n});\n\n\nclass MainPage extends Component {   //class App will use the component lib / Component expects that there is a render function in this class\n\n    constructor() {\n        super();\n        this.state = {\n        };\n    }\n\n    getRouteComponent = ({ onRouteChange, route, darkMode, goals, onAddGoal, onEditGoal, onRemoveGoal, calculateRoutineToShow }, goalsPageOptions) => {\n\n        if (route === INITIAL_ROUTE) {\n            return (\n                <Suspense fallback={<LoadingSpinner />}>\n                    <AsyncPageInitial darkMode={darkMode} onRouteChange={onRouteChange} />\n                </Suspense>\n            )\n        } else if (route === TODAY_ROUTE) {\n            calculateRoutineToShow();\n            return (\n                <Suspense fallback={<LoadingSpinner />}>\n                    <AsyncPageToday />\n                </Suspense>\n            )\n        } else if (route === HISTORY_ROUTE) {\n            return (\n                <Suspense fallback={<LoadingSpinner />}>\n                    <AsyncPageHistory />\n                </Suspense>\n            )\n        } else if (route === MOTIVATION_ROUTE) {\n            return (\n                <Suspense fallback={<LoadingSpinner />}>\n                    <AsyncPageMotivation />\n                </Suspense>\n            )\n        } else if (route === GOALS_ROUTE) {\n            return (\n                <Suspense fallback={<LoadingSpinner />}>\n                    <AsyncPageGoals goals={goals} onAddGoal={onAddGoal} onEditGoal={onEditGoal} onRemoveGoal={onRemoveGoal} options={goalsPageOptions} darkMode={darkMode} />\n                </Suspense>\n            )\n        }\n    }\n    render() {\n        const { route, onRouteChange, onDarkModeChange, darkMode, classes, goals } = this.props;\n        const goalsPageOptions = {\n            hideTitle: false,\n            noGoalsMessage: \"No goals defined. Define at least one goal to start your evening routine.\",\n        }\n        let page = this.getRouteComponent(this.props, goalsPageOptions);\n\n        const goalsSet = (goals.length > 0 && route !== INITIAL_ROUTE) ? true : false;\n\n        return (\n            <div className={route === INITIAL_ROUTE ? classes.body : undefined}>\n                {<Header onRouteChange={onRouteChange} onDarkModeChange={onDarkModeChange} darkMode={darkMode} route={route} goalsSet={goalsSet} />}\n                <Wrapper>\n                    {page}\n                </Wrapper>\n            </div>\n        )\n    }\n}\n\nMainPage.propTypes = {\n    classes: PropTypes.object.isRequired,\n};\n\nexport default withStyles(styles)(MainPage);\n\n","import React, { Component } from 'react';   //destructuring (instead of React.Component)\nimport { connect } from 'react-redux';\nimport MainPage from './MainPage/MainPage'\n\nimport { setRoute, setDarkMode, addGoal, editGoal, removeGoal, calculateRoutineToShow } from '../actions/actions'\n\nconst mapStateToProps = state => {\n    return {\n        route: state.changeRoute.route,\n        darkMode: state.changeDarkMode.darkMode,\n        goals: state.changeGoals.goals                    // -''-\n    }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        //onSearchChange is a function which will pass the event to it's inner \n        //there the dispatch will get called which will call the setSearchField action in redux and \n        //it will hand over the event.target.value (which is the stuff typed in the search box)\n        onRouteChange: (route) => dispatch(setRoute(route)),\n        onDarkModeChange: (darkMode) => dispatch(setDarkMode(darkMode)),\n        onAddGoal: (goal) => dispatch(addGoal(goal)),\n        onEditGoal: (goal, index) => dispatch(editGoal(goal, index)),\n        onRemoveGoal: (index) => dispatch(removeGoal(index)),\n        calculateRoutineToShow: () => dispatch(calculateRoutineToShow())\n    }\n}\n\nclass App extends Component {   //only the react \n    render() {\n        return <MainPage {...this.props} />\n    }\n}\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n\n//connect is a higher order function - will return another function -> that's why it is written that way above\n//\n//connect() is subscribed to the redux store now and it accepts 2 params: \n//1st is mapStateToProps: what state the component is interested in\n//2nd is mapDispatchToProps: ","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n  // [::1] is the IPv6 localhost address.\n  window.location.hostname === '[::1]' ||\n  // 127.0.0.1/8 is considered localhost for IPv4.\n  window.location.hostname.match(\n    /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n  )\n);\n\nexport function register(config) {\n  if ('serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    console.log(\"process env: \" + process.env.PUBLIC_URL);\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n            'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n\n  }\n}\n\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n\n","import {\n    INITIAL_ROUTE,\n    CHANGE_DARK_MODE,\n    CHANGE_ROUTE,\n    ADD_GOAL,\n    EDIT_GOAL,\n    REMOVE_GOAL,\n    SAVE_ROUTINE,\n    CALCULATE_ROUTINETOSHOW,\n    CHANGE_TASK_DONE,\n    CHANGE_PAGE_VISITED,\n    HISTORY_ROUTE\n} from '../constants'       //get constants form constants file\n\n//import { getSunrise, getSunset } from 'sunrise-sunset-js';    //imports for sunrise, sunset calculcation\n\n/**\n * CHANGEROUTE REDUCER\n */\n\n\n//define the initialstate in the reducer \nconst initialRoute = {\n    route: INITIAL_ROUTE         //initial object in the redux store\n}\n\n//searchPeople function -> use default params (initialState, empty action object)\n//reducers get a input of a state and action -> if this one get something we care about (like searching people), we will do something\nexport const changeRoute = (state = initialRoute, action = {}) => {\n    switch (action.type) {\n        case CHANGE_ROUTE:       //if a CHANGE_SEARCH_FIELD action comes in, we will do something\n            return Object.assign({}, state, { route: action.payload })\n        //1st param= new object\n        //2nd param= state we receiving\n        //3rd param=is what we want to change in the state\n        //so what we return is a new object with everything in the state + new searchField -> 2nd principle: State is read only\n        default:\n            return state    //if a other action comes in, return the state as it was passed over and do not change anything\n    }\n}\n\n\n\n\n/**\n * DARKMODE REDUCER\n */\n\n\nconst calculateDarkMode = () => {\n    /* TO CALCULATE SUNRISE / SUNSET BASED ON LOCATION:\n    navigator.geolocation.getCurrentPosition(function (position) {\n        console.log(getSunrise(position.coords.latitude, position.coords.longitude), getSunset(position.coords.latitude, position.coords.longitude));\n    });\n    */\n    var today = new Date();\n    var time = today.getHours();\n    if (time >= 7 && time <= 18) return false;  //if it's between 7am and 6pm, use lightMode, otherwise darkMode\n    return true;\n}\n\n\nconst initialDarkMode = {\n    darkMode: calculateDarkMode()       //initial object in the redux store\n}\n\n//changeDarkMode function -> use default params (initialState, empty action object)\n//reducers get a input of a state and action -> if this one get something we care about (like changingDarkMode), we will do something\nexport const changeDarkMode = (state = initialDarkMode, action = {}) => {\n    switch (action.type) {\n        case CHANGE_DARK_MODE:       //if a CHANGE_DARK_MODE action comes in, we will do something\n            return Object.assign({}, state, { darkMode: action.payload })\n        //1st param= new object\n        //2nd param= state we receiving\n        //3rd param=is what we want to change in the state\n        //so what we return is a new object with everything in the state + new darkMode -> 2nd principle: State is read only\n        default:\n            return state    //if a other action comes in, return the state as it was passed over and do not change anything\n    }\n}\n\n\n\n\nconst initialGoals = {\n    goals: []\n}\n\n//changeGoals function -> use default params (initialState, empty action object)\n//reducers get a input of a state and action -> if this one get something we care about (like changeGoals), we will do something\nexport const changeGoals = (state = initialGoals, action = {}) => {\n    switch (action.type) {\n        case ADD_GOAL:       //if a ADD_GOAL action comes in, the new goal will added to the existing goals\n            const newGoals = [...state.goals, action.payload];\n            return Object.assign({}, state, { goals: newGoals })\n        case EDIT_GOAL:       //if a EDIT_GOAL action comes in, the edited goals will be the new goal\n            return Object.assign({}, state,\n                {\n                    goals: state.goals.map((goal, index) => index === action.payload.index ?\n                        // transform the one with a matching id\n                        action.payload.goal :\n                        // otherwise return original todo\n                        goal\n                    )\n                }\n            )\n        case REMOVE_GOAL:       //if a REMOVE_GOAL action comes in, the goal will be removed\n            return Object.assign({}, state, { goals: state.goals.filter((goal, index) => index !== action.payload) })\n        //1st param= new object\n        //2nd param= state we receiving\n        //3rd param=is what we want to change in the state\n        //so what we return is a new object with everything in the state + new darkMode -> 2nd principle: State is read only\n        default:\n            return state    //if a other action comes in, return the state as it was passed over and do not change anything\n    }\n}\n\n\nconst initialRoutines = {\n    routines: [\n        {\n            id: 0,\n            recap: 'I figured out how to build nice new stuff in React \\nMore text here \\nand even more here....',\n            tasks: [\n                {\n                    title: 'Having lunch',\n                    description: 'eat something nice',\n                    plannedtime: '2020-03-29T10:00:19.238Z',\n                    tableData: {\n                        id: 0\n                    },\n                    done: true,\n                },\n                {\n                    title: 'Coding',\n                    description: 'more coding :)',\n                    plannedtime: '2020-03-29T16:00:19.238Z',\n                    tableData: {\n                        id: 1\n                    },\n                    done: true,\n                },\n                {\n                    title: 'Sleeping',\n                    description: 'having a power nap in the afternoon',\n                    plannedtime: '2020-03-29T13:00:19.238Z',\n                    tableData: {\n                        id: 2\n                    },\n                    done: false,\n                },\n            ],\n            goals: [\n                {\n                    title: 'asdf',\n                    description: 'asdf',\n                    category: 'Educational'\n                }\n            ],\n            createdAt: 'Sun Mar 29 2020 23:24:34 GMT+0100 (Central European Standard Time)',\n        },\n        {\n            id: 1,\n            recap: 'I managed to complete my project - this made my really happy and excited to finish my other projects as well. Motivation is back 🤘',\n            tasks: [\n                {\n                    title: 'Having lunch',\n                    description: 'eat something nice',\n                    plannedtime: '2020-03-29T10:00:19.238Z',\n                    tableData: {\n                        id: 0\n                    },\n                    done: true,\n                },\n                {\n                    title: 'Coding',\n                    description: 'more coding :)',\n                    plannedtime: '2020-03-29T16:00:19.238Z',\n                    tableData: {\n                        id: 1\n                    },\n                    done: true,\n                },\n                {\n                    title: 'Staying at home',\n                    description: 'staying at home - fighting Corona 🦠',\n                    plannedtime: '2020-03-29T13:00:19.238Z',\n                    tableData: {\n                        id: 2\n                    },\n                    done: true,\n                },\n            ],\n            goals: [\n                {\n                    title: 'asdf',\n                    description: 'asdf',\n                    category: 'Educational'\n                }\n            ],\n            createdAt: 'Sun Mar 22 2020 23:24:34 GMT+0100 (Central European Standard Time)'\n        },\n        {\n            id: 2,\n            recap: 'This new book I start is awesome - will continue to read it tomorrow! \\nMore text here \\nand even more here....',\n            tasks: [\n                {\n                    title: 'Having lunch',\n                    description: 'eat something nice',\n                    plannedtime: '2020-03-29T10:00:19.238Z',\n                    tableData: {\n                        id: 0\n                    },\n                    done: true,\n                },\n                {\n                    title: 'Reading',\n                    description: 'reading this new book I bought',\n                    plannedtime: '2020-03-29T16:00:19.238Z',\n                    tableData: {\n                        id: 1\n                    },\n                    done: true,\n                },\n                {\n                    title: 'Running',\n                    description: 'Time for a run - staying healthy 🏃🏼‍♂️',\n                    plannedtime: '2020-03-29T13:00:19.238Z',\n                    tableData: {\n                        id: 2\n                    },\n                    done: true,\n                },\n            ],\n            goals: [\n                {\n                    title: 'asdf',\n                    description: 'asdf',\n                    category: 'Educational'\n                }\n            ],\n            createdAt: 'Tue Mar 24 2020 01:24:34 GMT+0100 (Central European Standard Time)'\n        },\n        {\n            id: 3,\n            recap: 'Today was pretty successful for me - I worked on my new React Project called Evening Routine. \\nMore text here \\nand even more here....',\n            tasks: [\n                {\n                    title: 'Having lunch',\n                    description: 'eat something nice',\n                    plannedtime: '2020-03-29T10:00:19.238Z',\n                    tableData: {\n                        id: 0\n                    },\n                    done: true,\n                },\n                {\n                    title: 'Reading',\n                    description: 'reading this new book I bought',\n                    plannedtime: '2020-03-29T16:00:19.238Z',\n                    tableData: {\n                        id: 1\n                    },\n                    done: true,\n                },\n                {\n                    title: 'Stay home',\n                    description: 'Staying at home - fighting Corona',\n                    plannedtime: '2020-03-29T13:00:19.238Z',\n                    tableData: {\n                        id: 2\n                    },\n                    done: true,\n                },\n            ],\n            goals: [\n                {\n                    title: 'asdf',\n                    description: 'asdf',\n                    category: 'Educational'\n                }\n            ],\n            createdAt: 'Mon Mar 23 2020 23:24:34 GMT+0100 (Central European Standard Time)'\n        },\n\n    ],\n    routineToShow: {}\n}\n\nconst calculateRoutineToShow = (routines) => {\n    var now = new Date();\n\n    var midnight = new Date(new Date().toDateString());\n    /*\n                var six = new Date(new Date().toDateString());;\n                six.setHours(midnight.getHours() + 6);\n    \n                var eightteen = new Date(new Date().toDateString());\n                eightteen.setHours(midnight.getHours() + 18);\n    \n                var endofday = new Date(new Date().toDateString());\n                endofday.setDate(midnight.getDate() + 1);\n                endofday.setMilliseconds(endofday.getMilliseconds() - 1);\n    \n                var yesterday = new Date(new Date().toDateString());\n                yesterday.setDate(midnight.getDate() - 1);\n    */\n    var yesterdaySix = new Date(new Date().toDateString());\n    yesterdaySix.setDate(midnight.getDate() - 1);\n    yesterdaySix.setHours(yesterdaySix.getHours() + 6);\n\n    routines.sort((a, b) => {\n        return Date.parse(b.createdAt) - Date.parse(a.createdAt);\n    });\n    const routineToReturn = routines.find(routine => (Date.parse(yesterdaySix) < Date.parse(routine.createdAt)) && (Date.parse(routine.createdAt) <= Date.parse(now)));\n    return routineToReturn !== undefined ? routineToReturn : {};\n}\n\n\nexport const changeRoutines = (state = initialRoutines, action = {}) => {\n    var routineToShow = {};\n    switch (action.type) {\n        case SAVE_ROUTINE:       //if a ADD_GOAL action comes in, the new goal will added to the existing goals\n            const newRoutine = Object.assign({\n                id: Math.max(0, ...state.routines.map(r => r.id)) + 1,\n            }, action.payload);\n            const newRoutines = [...state.routines, newRoutine];\n            routineToShow = calculateRoutineToShow(newRoutines);\n            return Object.assign({}, state, { routines: newRoutines, routineToShow: routineToShow })\n\n        case CALCULATE_ROUTINETOSHOW:\n            routineToShow = calculateRoutineToShow(state.routines);\n            return Object.assign({}, state, { routineToShow: routineToShow })\n\n        case CHANGE_TASK_DONE:\n            return Object.assign({}, state,\n                {\n                    routines: state.routines.map((routine) => routine.id === action.payload.routineIndex ?\n                        // transform the routine with a matching routineIndex\n                        Object.assign({}, routine,\n                            {\n                                tasks: routine.tasks.map((task) => task.tableData.id === action.payload.taskIndex ?\n                                    // transform the task with a matching taskIndex\n                                    { ...task, done: action.payload.done }\n                                    :\n                                    // otherwise return original task\n                                    task\n                                )\n                            })\n                        :\n                        // otherwise return original routine\n                        routine\n                    ),\n                    routineToShow:\n                        state.routineToShow.id === action.payload.routineIndex ?\n                            Object.assign({}, state.routineToShow,\n                                {\n                                    tasks: state.routineToShow.tasks.map((task) => task.tableData.id === action.payload.taskIndex ?\n                                        // transform the task with a matching taskIndex\n                                        { ...task, done: action.payload.done }\n                                        :\n                                        // otherwise return original task\n                                        task\n                                    )\n                                })\n                            :\n                            // otherwise return original routineToShow\n                            state.routineToShow\n                });\n        default:\n            return state    //if a other action comes in, return the state as it was passed over and do not change anything\n    }\n}\n\n\nconst initialPagesVisited = {\n    pagesVisited: [\n        {\n            route: HISTORY_ROUTE,\n            visited: false\n        }\n    ]\n}\n\nexport const changePageVisited = (state = initialPagesVisited, action = {}) => {\n    switch (action.type) {\n        case CHANGE_PAGE_VISITED:\n            return Object.assign({}, state,\n                {\n                    pagesVisited: state.pagesVisited.map((page) => page.route === action.payload.route ?\n                        { ...page, visited: action.payload.visited }\n                        :\n                        page\n                    )\n                })\n        default:\n            return state\n    }\n}","import React from 'react';\nimport { connect } from 'react-redux';\nimport { createMuiTheme, ThemeProvider } from '@material-ui/core/styles';\n\nconst mapStateToProps = state => {\n    return {\n        route: state.changeRoute.route,\n        darkMode: state.changeDarkMode.darkMode                    // -''-\n    }\n}\n\nconst Theme = (props) => {\n    const { darkMode } = props;\n    const theme = React.useMemo(\n        () =>\n            createMuiTheme({\n                palette: {\n                    type: darkMode ? 'dark' : 'light',\n                    primary: {\n                        light: '#519DFF',\n                        main: '#496AEA',\n                        dark: '#4957D6',\n                        // contrastText: will be calculated to contrast with palette.primary.main\n                    },\n                    secondary: {\n                        light: '#FFCB49',\n                        main: '#FBA435',\n                        dark: '#F99433',\n                    }\n                },\n            }),\n        [darkMode],\n    );\n\n    return (\n        <ThemeProvider theme={theme}>\n            {props.children}\n        </ThemeProvider>\n    );\n}\n\n\nexport default connect(mapStateToProps)(Theme);\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux'          //importing the provider from the react-redux\nimport { createStore, applyMiddleware, combineReducers } from 'redux'\nimport { createLogger } from 'redux-logger'\nimport thunkMiddleware from 'redux-thunk'\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport 'typeface-roboto';\n\nimport './index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\nimport { changeRoute, changeDarkMode, changeGoals, changeRoutines, changePageVisited } from './reducers/reducers';\n\nimport Theme from './components/Theme/Theme';\n\nconst logger = createLogger();\nconst rootReducer = combineReducers({ changeRoute, changeDarkMode, changeGoals, changeRoutines, changePageVisited });       //combine the reducers from the reducers file into one root reducer\nconst store = createStore(rootReducer, composeWithDevTools(applyMiddleware(thunkMiddleware, logger)));\n//to create the store with the root reducer and apply the thunkMiddleware and the logger to the store\n\n\nReactDOM.render(\n    <Provider store={store}>\n        <Theme>\n            <App />\n        </Theme>\n    </Provider>, document.getElementById('root'));\n//render the provider with the app to the html tag with root as id (is in public/index.html)\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n\n","import {\n    CHANGE_DARK_MODE,\n    CHANGE_ROUTE,\n    ADD_GOAL,\n    EDIT_GOAL,\n    REMOVE_GOAL,\n    SAVE_ROUTINE,\n    CALCULATE_ROUTINETOSHOW,\n    CHANGE_TASK_DONE,\n    CHANGE_PAGE_VISITED,\n} from '../constants'       //get constants form constants file\n\n\n//import { getFirstPeople, getMorePeople, replaceSpeciesName } from './api/api';\n\n//first action in here - this action will receive input of text which the user types - it will return a object with type and payload\n//this action will send the object on to the reducer\nexport const setRoute = (route) => ({\n    type: CHANGE_ROUTE,                  //constants are usually capitalized - we use a variable here to avoid misspelling \n    payload: route\n})\n\n\n\n//first action in here - this action will receive input of text which the user types - it will return a object with type and payload\n//this action will send the object on to the reducer\nexport const setDarkMode = (boolean) => ({\n    type: CHANGE_DARK_MODE,                  //constants are usually capitalized - we use a variable here to avoid misspelling \n    payload: boolean\n})\n\nexport const addGoal = (goal) => ({\n    type: ADD_GOAL,                  //constants are usually capitalized - we use a variable here to avoid misspelling \n    payload: goal\n})\n\nexport const editGoal = (goal, index) => ({\n    type: EDIT_GOAL,                  //constants are usually capitalized - we use a variable here to avoid misspelling \n    payload: { goal: goal, index: index }\n})\n\nexport const removeGoal = (index) => ({\n    type: REMOVE_GOAL,                  //constants are usually capitalized - we use a variable here to avoid misspelling \n    payload: index\n})\n\n\n\n\nexport const saveRoutine = (routine) => ({\n    type: SAVE_ROUTINE,                  //constants are usually capitalized - we use a variable here to avoid misspelling \n    payload: routine\n})\n\nexport const calculateRoutineToShow = () => ({\n    type: CALCULATE_ROUTINETOSHOW\n})\n\n\nexport const setTaskDone = (routineIndex, taskIndex, done) => ({\n    type: CHANGE_TASK_DONE,\n    payload: { routineIndex: routineIndex, taskIndex: taskIndex, done: done }\n})\n\n\nexport const setPageVisited = (ROUTE, visited) => ({\n    type: CHANGE_PAGE_VISITED,\n    payload: { route: ROUTE, visited: visited }\n})\n\n\n\n//actions can just be objects {}\n/*\nexport const requestPeople = () => (dispatch) => {          //this action will take the dispatch to get access to it - requestPeople returns a function and thunk middleware will hook on it\n    dispatch({ type: REQUEST_FIRST_PEOPLE_PENDING });             //dispatch the pending action - \"will call the action in reducer\" - so the PENDING will be called right away\n    getFirstPeople('https://swapi.co/api/people/')         //make this http request & convert it to JSON\n        .then(firstPeople => dispatch({ type: REQUEST_FIRST_PEOPLE_SUCCESS, payload: firstPeople.people, next: firstPeople.nextLink }))        //call the SUCCESS in reducer with the user payload\n        .then(firstPeople => {\n            replaceSpeciesName(firstPeople.payload)\n                .then(firstPeopleWSpecies => {\n                    dispatch({ type: REQUEST_FIRST_IMAGES_SUCCESS, payload: firstPeopleWSpecies });\n                    dispatch({ type: REQUEST_MORE_PEOPLE_PENDING });\n                    getMorePeople(firstPeople.next)\n                        .then(morePeople => dispatch({ type: REQUEST_MORE_PEOPLE_SUCCESS, payload: morePeople }))\n                        .then(morePeople => {\n                            replaceSpeciesName(morePeople.payload)\n                                .then(morePeopleWSpecies => {\n                                    dispatch({ type: REQUEST_MORE_IMAGES_SUCCESS, payload: { people: morePeopleWSpecies, position: firstPeople.payload.length } });\n                                })\n                        })\n                })\n        })\n        .catch(error => dispatch({ type: REQUEST_FIRST_PEOPLE_FAILED, payload: error }))\n}\n*/\n","import React from 'react'\n\nimport './LoadingSpinner.css';\n\n\nconst LoadingSpinner = (props) => {\n    const { className } = props;\n    return (\n        <div className={`${className} \"loadingContainer\"`}>\n            <div className=\"circleLoading\"></div>\n        </div>\n    );\n}\n\nexport default LoadingSpinner;\n","/*\n* REDUX\n*/\n\nexport const CHANGE_DARK_MODE = 'CHANGE_DARK_MODE';\nexport const CHANGE_ROUTE = 'CHANGE_ROUTE';\n\nexport const ADD_GOAL = 'ADD_GOAL';\nexport const EDIT_GOAL = 'EDIT_GOAL';\nexport const REMOVE_GOAL = 'REMOVE_GOAL';\n\nexport const SAVE_ROUTINE = 'SAVE_ROUTINE';\n\nexport const CALCULATE_ROUTINETOSHOW = 'CALCULATE_ROUTINETOSHOW';\nexport const CHANGE_TASK_DONE = 'CHANGE_TASK_DONE';\n\nexport const CHANGE_PAGE_VISITED = 'CHANGE_PAGE_VISITED';\n\n/*\n* REACT\n*/\nexport const INITIAL_ROUTE = 'initial';\nexport const TODAY_ROUTE = 'today';\nexport const HISTORY_ROUTE = 'history';\nexport const MOTIVATION_ROUTE = 'motivation';\nexport const GOALS_ROUTE = 'goals';\nexport const IMPRINT_ROUTE = 'imprint';\n\nexport const GOAL_CATEGORIES = {\n    GOAL_CAT_EDUCATIONAL: 'Educational',\n    GOAL_CAT_HEALTH: 'Physical & Health',\n    GOAL_CAT_RELATIONSHIP: 'Relationship',\n    GOAL_CAT_PERSONAL: 'Personal Development',\n    GOAL_CAT_CAREER: 'Career',\n    GOAL_CAT_FINANCIAL: 'Financial',\n    GOAL_CAT_SPIRITUAL: 'Spiritual',\n    GOAL_CAT_PSYCHOLOGICAL: 'Psychological',\n    GOAL_CAT_EXTERNAL: 'External',\n    GOAL_CAT_EXPERIMENTAL: 'Experimental',\n}"],"sourceRoot":""}